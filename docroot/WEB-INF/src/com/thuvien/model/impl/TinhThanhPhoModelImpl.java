/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.thuvien.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.thuvien.model.TinhThanhPho;
import com.thuvien.model.TinhThanhPhoModel;
import com.thuvien.model.TinhThanhPhoSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the TinhThanhPho service. Represents a row in the &quot;tinhthanhpho&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.thuvien.model.TinhThanhPhoModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TinhThanhPhoImpl}.
 * </p>
 *
 * @author ADMIN
 * @see TinhThanhPhoImpl
 * @see com.thuvien.model.TinhThanhPho
 * @see com.thuvien.model.TinhThanhPhoModel
 * @generated
 */
@JSON(strict = true)
public class TinhThanhPhoModelImpl extends BaseModelImpl<TinhThanhPho>
	implements TinhThanhPhoModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a tinh thanh pho model instance should use the {@link com.thuvien.model.TinhThanhPho} interface instead.
	 */
	public static final String TABLE_NAME = "tinhthanhpho";
	public static final Object[][] TABLE_COLUMNS = {
			{ "idgh", Types.BIGINT },
			{ "type", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table tinhthanhpho (idgh LONG not null primary key,type VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table tinhthanhpho";
	public static final String ORDER_BY_JPQL = " ORDER BY tinhThanhPho.name ASC";
	public static final String ORDER_BY_SQL = " ORDER BY tinhthanhpho.idgh ASC";
	public static final String DATA_SOURCE = "qlthuvienDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.thuvien.model.TinhThanhPho"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.thuvien.model.TinhThanhPho"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static TinhThanhPho toModel(TinhThanhPhoSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		TinhThanhPho model = new TinhThanhPhoImpl();

		model.setName(soapModel.getName());
		model.setType(soapModel.getType());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<TinhThanhPho> toModels(TinhThanhPhoSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<TinhThanhPho> models = new ArrayList<TinhThanhPho>(soapModels.length);

		for (TinhThanhPhoSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.thuvien.model.TinhThanhPho"));

	public TinhThanhPhoModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _name;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setName(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _name;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return TinhThanhPho.class;
	}

	@Override
	public String getModelClassName() {
		return TinhThanhPho.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("name", getName());
		attributes.put("Type", getType());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long name = (Long)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String Type = (String)attributes.get("Type");

		if (Type != null) {
			setType(Type);
		}
	}

	@JSON
	@Override
	public long getName() {
		return _name;
	}

	@Override
	public void setName(long name) {
		_name = name;
	}

	@JSON
	@Override
	public String getType() {
		if (_Type == null) {
			return StringPool.BLANK;
		}
		else {
			return _Type;
		}
	}

	@Override
	public void setType(String Type) {
		_Type = Type;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			TinhThanhPho.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public TinhThanhPho toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (TinhThanhPho)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TinhThanhPhoImpl tinhThanhPhoImpl = new TinhThanhPhoImpl();

		tinhThanhPhoImpl.setName(getName());
		tinhThanhPhoImpl.setType(getType());

		tinhThanhPhoImpl.resetOriginalValues();

		return tinhThanhPhoImpl;
	}

	@Override
	public int compareTo(TinhThanhPho tinhThanhPho) {
		long primaryKey = tinhThanhPho.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof TinhThanhPho)) {
			return false;
		}

		TinhThanhPho tinhThanhPho = (TinhThanhPho)obj;

		long primaryKey = tinhThanhPho.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<TinhThanhPho> toCacheModel() {
		TinhThanhPhoCacheModel tinhThanhPhoCacheModel = new TinhThanhPhoCacheModel();

		tinhThanhPhoCacheModel.name = getName();

		tinhThanhPhoCacheModel.Type = getType();

		String Type = tinhThanhPhoCacheModel.Type;

		if ((Type != null) && (Type.length() == 0)) {
			tinhThanhPhoCacheModel.Type = null;
		}

		return tinhThanhPhoCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(5);

		sb.append("{name=");
		sb.append(getName());
		sb.append(", Type=");
		sb.append(getType());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(10);

		sb.append("<model><model-name>");
		sb.append("com.thuvien.model.TinhThanhPho");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>Type</column-name><column-value><![CDATA[");
		sb.append(getType());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = TinhThanhPho.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			TinhThanhPho.class
		};
	private long _name;
	private String _Type;
	private TinhThanhPho _escapedModel;
}