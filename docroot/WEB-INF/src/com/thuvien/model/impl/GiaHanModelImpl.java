/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.thuvien.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.thuvien.model.GiaHan;
import com.thuvien.model.GiaHanModel;
import com.thuvien.model.GiaHanSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the GiaHan service. Represents a row in the &quot;giahan&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.thuvien.model.GiaHanModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link GiaHanImpl}.
 * </p>
 *
 * @author ADMIN
 * @see GiaHanImpl
 * @see com.thuvien.model.GiaHan
 * @see com.thuvien.model.GiaHanModel
 * @generated
 */
@JSON(strict = true)
public class GiaHanModelImpl extends BaseModelImpl<GiaHan>
	implements GiaHanModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a gia han model instance should use the {@link com.thuvien.model.GiaHan} interface instead.
	 */
	public static final String TABLE_NAME = "giahan";
	public static final Object[][] TABLE_COLUMNS = {
			{ "idgh", Types.BIGINT },
			{ "ngaygiahan", Types.TIMESTAMP },
			{ "phieumuonid", Types.BIGINT },
			{ "trangthai", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table giahan (idgh LONG not null primary key,ngaygiahan DATE null,phieumuonid LONG,trangthai VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table giahan";
	public static final String ORDER_BY_JPQL = " ORDER BY giaHan.IdGh ASC";
	public static final String ORDER_BY_SQL = " ORDER BY giahan.idgh ASC";
	public static final String DATA_SOURCE = "qlthuvienDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.thuvien.model.GiaHan"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.thuvien.model.GiaHan"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static GiaHan toModel(GiaHanSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		GiaHan model = new GiaHanImpl();

		model.setIdGh(soapModel.getIdGh());
		model.setNgayGianHan(soapModel.getNgayGianHan());
		model.setPhieuMuonId(soapModel.getPhieuMuonId());
		model.setTrangThai(soapModel.getTrangThai());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<GiaHan> toModels(GiaHanSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<GiaHan> models = new ArrayList<GiaHan>(soapModels.length);

		for (GiaHanSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.thuvien.model.GiaHan"));

	public GiaHanModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _IdGh;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setIdGh(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _IdGh;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return GiaHan.class;
	}

	@Override
	public String getModelClassName() {
		return GiaHan.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("IdGh", getIdGh());
		attributes.put("NgayGianHan", getNgayGianHan());
		attributes.put("PhieuMuonId", getPhieuMuonId());
		attributes.put("TrangThai", getTrangThai());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long IdGh = (Long)attributes.get("IdGh");

		if (IdGh != null) {
			setIdGh(IdGh);
		}

		Date NgayGianHan = (Date)attributes.get("NgayGianHan");

		if (NgayGianHan != null) {
			setNgayGianHan(NgayGianHan);
		}

		Long PhieuMuonId = (Long)attributes.get("PhieuMuonId");

		if (PhieuMuonId != null) {
			setPhieuMuonId(PhieuMuonId);
		}

		String TrangThai = (String)attributes.get("TrangThai");

		if (TrangThai != null) {
			setTrangThai(TrangThai);
		}
	}

	@JSON
	@Override
	public long getIdGh() {
		return _IdGh;
	}

	@Override
	public void setIdGh(long IdGh) {
		_IdGh = IdGh;
	}

	@JSON
	@Override
	public Date getNgayGianHan() {
		return _NgayGianHan;
	}

	@Override
	public void setNgayGianHan(Date NgayGianHan) {
		_NgayGianHan = NgayGianHan;
	}

	@JSON
	@Override
	public long getPhieuMuonId() {
		return _PhieuMuonId;
	}

	@Override
	public void setPhieuMuonId(long PhieuMuonId) {
		_PhieuMuonId = PhieuMuonId;
	}

	@JSON
	@Override
	public String getTrangThai() {
		if (_TrangThai == null) {
			return StringPool.BLANK;
		}
		else {
			return _TrangThai;
		}
	}

	@Override
	public void setTrangThai(String TrangThai) {
		_TrangThai = TrangThai;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			GiaHan.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public GiaHan toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (GiaHan)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		GiaHanImpl giaHanImpl = new GiaHanImpl();

		giaHanImpl.setIdGh(getIdGh());
		giaHanImpl.setNgayGianHan(getNgayGianHan());
		giaHanImpl.setPhieuMuonId(getPhieuMuonId());
		giaHanImpl.setTrangThai(getTrangThai());

		giaHanImpl.resetOriginalValues();

		return giaHanImpl;
	}

	@Override
	public int compareTo(GiaHan giaHan) {
		long primaryKey = giaHan.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof GiaHan)) {
			return false;
		}

		GiaHan giaHan = (GiaHan)obj;

		long primaryKey = giaHan.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<GiaHan> toCacheModel() {
		GiaHanCacheModel giaHanCacheModel = new GiaHanCacheModel();

		giaHanCacheModel.IdGh = getIdGh();

		Date NgayGianHan = getNgayGianHan();

		if (NgayGianHan != null) {
			giaHanCacheModel.NgayGianHan = NgayGianHan.getTime();
		}
		else {
			giaHanCacheModel.NgayGianHan = Long.MIN_VALUE;
		}

		giaHanCacheModel.PhieuMuonId = getPhieuMuonId();

		giaHanCacheModel.TrangThai = getTrangThai();

		String TrangThai = giaHanCacheModel.TrangThai;

		if ((TrangThai != null) && (TrangThai.length() == 0)) {
			giaHanCacheModel.TrangThai = null;
		}

		return giaHanCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{IdGh=");
		sb.append(getIdGh());
		sb.append(", NgayGianHan=");
		sb.append(getNgayGianHan());
		sb.append(", PhieuMuonId=");
		sb.append(getPhieuMuonId());
		sb.append(", TrangThai=");
		sb.append(getTrangThai());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("com.thuvien.model.GiaHan");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>IdGh</column-name><column-value><![CDATA[");
		sb.append(getIdGh());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>NgayGianHan</column-name><column-value><![CDATA[");
		sb.append(getNgayGianHan());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>PhieuMuonId</column-name><column-value><![CDATA[");
		sb.append(getPhieuMuonId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>TrangThai</column-name><column-value><![CDATA[");
		sb.append(getTrangThai());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = GiaHan.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] { GiaHan.class };
	private long _IdGh;
	private Date _NgayGianHan;
	private long _PhieuMuonId;
	private String _TrangThai;
	private GiaHan _escapedModel;
}